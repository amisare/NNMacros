# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request 
# events but only for the master branch
on:
  push:
    branches: 
      - master
      - develop
      - develop-**
  pull_request:
    branches: 
      - master
      - develop
      - develop-**

env:
   LANG: en_US.UTF-8

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Cocoapods_Lint:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.sha }}
      - name: cocoapods_lint
        run: pod lib lint --allow-warnings --verbose
  
  Carthage_Lint:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.sha }}
      - name: carthage_lint
        run: carthage build --no-skip-current --use-xcframeworks
     
  Build_Examples:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.sha }}
      - name: bundle_install
        run: bundle install
      - name: build_examples
        env:
          scheme: ${{ 'NNMacrosExample' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device" | bundle exec xcpretty -c;
    
  Unit_Tests:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.sha }}
      - name: bundle_install
        run: bundle install
      - name: unit_tests
        env:
          scheme: ${{ 'NNMacrosExample' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device" | bundle exec xcpretty -c;
      - uses: codecov/codecov-action@v1
